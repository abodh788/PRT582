# -*- coding: utf-8 -*-
"""game.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10RDRrDRDVXx_2fmrTBlkJpEJWZRGpJZT
"""

import random

def generate_random_number():
    """Generate a random 4-digit number as a string."""
    return str(random.randint(1000, 9999))

def get_user_input():
    """Capture and return user input for their guess."""
    return input("Enter your guess: ")

def check_guess(secret_number, guess):
    """Evaluate a guess and provide hints."""
    circles = sum(1 for s, g in zip(secret_number, guess) if s == g)
    common_digits = set(secret_number) & set(guess)
    xs = sum(min(secret_number.count(d), guess.count(d)) for d in common_digits) - circles
    return f'{circles} circles, {xs} xs'

def game_loop():
    """Run the game loop, allowing the player to guess or quit."""
    secret_number = generate_random_number()
    attempts = 0

    while True:
        guess = get_user_input()

        if guess == 'quit':
            return "Game Over"

        attempts += 1
        hints = check_guess(secret_number, guess)
        print(f"Hints: {hints}")

        if hints.startswith("4 circles"):
            return f"Congratulations! You guessed the number in {attempts} attempts."

def display_results(attempts):
    """Display the number of attempts and offer the option to play again."""
    print(f"Number of attempts: {attempts}")
    choice = input("Play again? (yes/no): ")
    if choice == 'yes':
        game_loop()

if __name__ == '__main__':
    print("Welcome. Guess the Number!")
    result = game_loop()
    print(result)